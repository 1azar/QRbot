// Contains the functions necessary to initialize the bot.
// Used in main.go file of the package
package main

import (
	"QRbot/handlers"
	"encoding/json"
	"fmt"
	"github.com/go-playground/validator"
	"golang.org/x/text/language"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

func readLocalizationJson(props *handlers.Properties, langDir *string) {
	props.InfoLog.Println("Searching for localisation JSON files..")
	files, err := os.ReadDir(*langDir)
	if err != nil {
		props.ErrLog.Fatal(err)
	}
	var bw handlers.BotsWords
	validate := validator.New()
	tmpLang := make(map[string]handlers.BotsWords)
	for _, file := range files {
		fileName := strings.TrimSuffix(file.Name(), filepath.Ext(file.Name()))
		fileExt := filepath.Ext(file.Name())
		langID := language.All.Make(fileName).String()
		if fileExt != ".json" {
			continue
		}
		if langID == "und" {
			continue
		}
		props.InfoLog.Println(fmt.Sprintf("Checking for %s file", file.Name()))
		byteJson, err := os.ReadFile(filepath.Join(*langDir, file.Name()))
		if err != nil {
			props.ErrLog.Println(err)
			continue
		}
		err = json.Unmarshal(byteJson, &bw)
		if err != nil {
			props.ErrLog.Println(err)
			continue
		}
		err = validate.Struct(bw)
		if err != nil {
			props.InfoLog.Println(fmt.Sprintf("%s file has invalid structure. Can not be used", file.Name()))
			continue
		}
		tmpLang[langID] = bw
	}
	props.Lang = tmpLang

}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞:
func generateJSONen() {
	RuBotResponses := handlers.BotsWords{
		Greeting: "Hi! I am QR-chan ‚òú(Ôæü„ÉÆÔæü‚òú).\n" +
			"You can use me to generate QR codes." +
			"[can do nothing but this üëÄ‚Äç]\n" +
			"You send me message - I will encode it  tÃ∂hÃ∂eÃ∂ Ã∂hÃ∂eÃ∂cÃ∂kÃ∂ Ã∂uÃ∂pÃ∂ gracefully.\n" +
			"Also i have some options. You will figure out how to use them." +
			"You are smart human [maybe].",
		ReadyMsg: []string{"Here you go:",
			"Get this, human:",
			"Take a QRevich's square:",
			"I hope I didn't mix up any bits:",
			"Why is no one paying me for this:",
			"I forgot the 2nd law of robotics ;-;\n I hope there is nothing related to QR, otherwise I will be fired.",
			"I hope I didn't code anything evil:",
			"01101001 00100000 01101100 01101111 01110110 01100101 00100000 01111001 01101111 01110101:"},
		OptionsMsg: "Set me up, set me up completely",
		QRTypeMsg:  "Choose what type of QR to create",
	}
	file, _ := json.MarshalIndent(RuBotResponses, "", " ")
	_ = ioutil.WriteFile("en.json", file, 0644)
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞:
func generateJSONru() {
	RuBotResponses := handlers.BotsWords{
		Greeting: "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç QR-—á–∞–Ω [—Å –ø–ª–æ–≤–æ–º ‚òú(Ôæü„ÉÆÔæü‚òú)].\n" +
			"–ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤." +
			"[—è –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–º–µ—é ü§∑‚Äç]\n" +
			"–ü—Ä–∏—à–ª–µ—à—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —è –µ–≥–æ –∑–∞–∫–æ–¥–∏—Ä—É—é –ΩÃ∂–∞Ã∂—ÖÃ∂—ÉÃ∂–πÃ∂ –±–µ—Ä–µ–∂–Ω–æ.\n" +
			"–ï—â–µ —É –º–µ–Ω—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å—Ç—å, –∫–∞–∫ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –¥—É–º–∞—é, —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è." +
			"–¢—ã –∂–µ —É–º–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ [–Ω–∞–≤–µ—Ä–Ω–æ–µ].",
		ReadyMsg: []string{"–í–æ—Ç, –≥–æ—Ç–æ–≤–æ:",
			"–î–µ—Ä–∂–∏, –∫–æ–∂–∞–Ω–Ω—ã–π:",
			"–ó–∞–±–∏—Ä–∞–π –∫–≤–∞–¥—Ä–∞—Ç QR–µ–≤–∏—á–∞:",
			"–ù–∞–¥–µ—é—Å—å –Ω–∏–∫–∞–∫–æ–π –±–∏—Ç –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∞:",
			"–ò –ø–æ—á–µ–º—É –º–Ω–µ –∑–∞ —ç—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç:",
			"–ó–∞–±—ã–ª–∞ 2–æ–π –∑–∞–∫–æ–Ω —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ ;-;\n –ù–∞–¥–µ—é—Å—å —Ç–∞–º –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å QR, –∏–Ω—á–µ –º–µ–Ω—è —É–≤–æ–ª—è—Ç.",
			"–ù–∞–¥–µ—é—Å—å —è –Ω–∏—á–µ–≥–æ –ø–ª–æ—Ö–æ–≥–æ –Ω–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–ª–∞:",
			"01101001 00100000 01101100 01101111 01110110 01100101 00100000 01111001 01101111 01110101:"},
		OptionsMsg: "–ù–∞—Å—Ç—Ä–∏–≤–∞–π, –Ω–∞—Å—Ç—Ä–∏–≤–∞–π –º–µ–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é",
		QRTypeMsg:  "–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π —Ç–∏–ø QR –º–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å",
	}
	file, _ := json.MarshalIndent(RuBotResponses, "", " ")
	_ = ioutil.WriteFile("ru.json", file, 0644)
}
